from ctypes import *
import os
import sys
import logging
import struct

"""
/usr/include/x86_64-linux-gnu/sys/ptrace.h
/usr/include/x86_64-linux-gnu/asm/ptrace.h
"""
MEM_SEARCH_SIZE_DEFAULT = 16
MEM_SEARCH_SIZE_QUICK = 4

libc = CDLL('')
ptrace = libc.ptrace

#__ptrace_request
PTRACE_TRACEME = 0
PTRACE_PEEKTEXT = 1
PTRACE_PEEKDATA = 2
PTRACE_PEEKUSER = 3
PTRACE_POKETEXT = 4
PTRACE_POKEDATA = 5
PTRACE_POKEUSER = 6
PTRACE_CONT = 7
PTRACE_KILL = 8
PTRACE_SINGLESTEP = 9
PTRACE_GETREGS = 12
PTRACE_SETREGS = 13
PTRACE_GETFPREGS = 14
PTRACE_SETFPREGS = 15
PTRACE_ATTACH = 16
PTRACE_DETACH = 17
PTRACE_GETFPXREGS = 18
PTRACE_SETFPXREGS = 19
PTRACE_SYSCALL = 24
PTRACE_SYSEMU = 31
PTRACE_SETOPTIONS = 0x4200
PTRACE_GETEVENTMSG = 0x4201
PTRACE_GETSIGINFO = 0x4202
PTRACE_SETSIGINFO = 0x4203

#__ptrace_setoptions
PTRACE_O_TRACESYSGOOD = 0x00000001
PTRACE_O_TRACEFORK = 0x00000002
PTRACE_O_TRACEVFORK = 0x00000004
PTRACE_O_TRACECLONE = 0x00000008
PTRACE_O_TRACEEXEC = 0x00000010
PTRACE_O_TRACEVFORKDONE = 0x00000020
PTRACE_O_TRACEEXIT = 0x00000040
PTRACE_O_MASK = 0x0000007f

#__ptrace_eventcodes
PTRACE_EVENT_FORK=  1
PTRACE_EVENT_VFORK = 2
PTRACE_EVENT_CLONE = 3
PTRACE_EVENT_EXEC = 4
PTRACE_EVENT_VFORK_DONE = 5
PTRACE_EVENT_EXIT = 6

class user_regs_struct(Structure):
	_fields_ = [
		("r15", c_ulonglong),
		("r14", c_ulonglong),
		("r13", c_ulonglong),
		("r12", c_ulonglong),
		("rbp", c_ulonglong),
		("rbx", c_ulonglong),
		("r11", c_ulonglong),
		("r10", c_ulonglong),
		("r9", c_ulonglong),
		("r8", c_ulonglong),
		("rax", c_ulonglong),
		("rcx", c_ulonglong),
		("rdx", c_ulonglong),
		("rsi", c_ulonglong),
		("rdi", c_ulonglong),
		("orig_rax", c_ulonglong),
		("rip", c_ulonglong),
		("cs", c_ulonglong),
		("eflags", c_ulonglong),
		("rsp", c_ulonglong),
		("ss", c_ulonglong),
		("fs_base", c_ulonglong),
		("gs_base", c_ulonglong),
		("ds", c_ulonglong),
		("es", c_ulonglong),
		("fs", c_ulonglong),
		("gs", c_ulonglong)
	]

	def str_get(self, key):
		ref = {
			"r15" : self.r15,
			"r14" : self.r14,
			"r13" : self.r13,
			"r12" : self.r12,
			"rbp" : self.rbp,
			"rbx" : self.rbx,
			"r11" : self.r11,
			"r10" : self.r10,
			"r9" : self.r9,
			"r8" : self.r8,
			"rax" : self.rax,
			"rcx" : self.rcx,
			"rdx" : self.rdx,
			"rsi" : self.rsi,
			"rdi" : self.rdi,
			"orig_rax" : self.orig_rax,
			"rip" : self.rip,
			"cs" : self.cs,
			"eflags" : self.eflags,
			"rsp": self.rsp,
			"ss" : self.ss,
			"fs_base" : self.fs_base,
			"gs_base" : self.gs_base,
			"ds" : self.ds,
			"es" : self.es,
			"fs" : self.fs,
			"gs" : self.gs
		}
		return ref[key]

	def str_set(self, key, val):
		val = c_ulonglong(val)
		if key == 'r15':
			self.r15=val
		elif key == 'r14':
			self.r14=val
		elif key == 'r13':
			self.r13=val
		elif key == 'r12':
			self.r12=val
		elif key == 'rbp':
			self.rbp=val
		elif key == 'rbx':
			self.rbx=val
		elif key == 'r11':
			self.r11=val
		elif key == 'r10':
			self.r10=val
		elif key == 'r9':
			self.r9=val
		elif key == 'r8':
			self.r8=val
		elif key == 'rax':
			self.rax=val
		elif key == 'rcx':
			self.rcx=val
		elif key == 'rdx':
			self.rdx=val
		elif key == 'rsi':
			self.rsi=val
		elif key == 'rdi':
			self.rdi=val
		elif key == 'orig_rax':
			self.orig_rax=val
		elif key == 'rip':
			self.rip=val
		elif key == 'cs':
			self.cs=val
		elif key == 'eflags':
			self.eflags=val
		elif key == 'rsp':
			self.rsp=val
		elif key == 'ss':
			self.ss=val
		elif key == 'fs_base':
			self.fs_base=val
		elif key == 'gs_base':
			self.gs_base=val
		elif key == 'ds':
			self.ds=val
		elif key == 'es':
			self.es=val
		elif key == 'fs':
			self.fs=val
		elif key == 'gs':
			self.gs=val
		else:
			pass
		"""
		ref = {
			"r15" : self.r15,
			"r14" : self.r14,
			"r13" : self.r13,
			"r12" : self.r12,
			"rbp" : self.rbp,
			"rbx" : self.rbx,
			"r11" : self.r11,
			"r10" : self.r10,
			"r9" : self.r9,
			"r8" : self.r8,
			"rax" : self.rax,
			"rcx" : self.rcx,
			"rdx" : self.rdx,
			"rsi" : self.rsi,
			"rdi" : self.rdi,
			"orig_rax" : self.orig_rax,
			"rip" : self.rip,
			"cs" : self.cs,
			"eflags" : self.eflags,
			"rsp": self.rsp,
			"ss" : self.ss,
			"fs_base" : self.fs_base,
			"gs_base" : self.gs_base,
			"ds" : self.ds,
			"es" : self.es,
			"fs" : self.fs,
			"gs" : self.gs
		}
		ref[key] = val
		"""



"""
long ptrace(enum __ptrace_request request, pid_t pid,
                   void *addr, void *data);
"""

def break_action_default(dbg):
	dbg.logger.info('this bp not being handled. ')
	return None

class Debugger:
	def __init__(self, path, args):
		self.path = path
		self.args = args
		self.pid = None
		self.breakpoints={}
		self.logger = logging.getLogger('test')
		self.fd = {}

	def check_pid(self):
		if self.pid == None:
			logging.error("[!]no pid. run or attach first.")
			exit()

		return True

	def cont(self):
		self.check_pid()
		return ptrace(PTRACE_CONT, self.pid, None, None)

	def trace_child(self):
		return ptrace( PTRACE_SETOPTIONS, self.pid, None, 
			PTRACE_O_TRACEFORK | PTRACE_O_TRACECLONE | PTRACE_O_TRACEEXEC )

	def step(self):
		self.check_pid()
		return ptrace(PTRACE_SINGLESTEP, self.pid, None, None)

	def run(self):
		self.pid = os.fork()
		#child
		if not self.pid:
			ptrace(PTRACE_TRACEME, 0, None, None)
			os.execv(self.path, self.args)

		#parent
		else:
			_, status = os.waitpid(self.pid, 0)
			if os.WIFSTOPPED(status) or os.WSTOPSIG(status):
				return 0

			elif os.WIFEXITED(status) or os.WIFSIGNALED(status):
				return 1

			else:
				return -1

	def attach(self, pid):
		res = ptrace(PTRACE_ATTACH, pid, None, None)
		if res == 0:
			self.pid = pid

		else:
			self.logger.error("[!]attach failed. %d: %s"%(res, os.strerror(res)))

		return res

	def get_regs(self):
		self.check_pid()

		regs = user_regs_struct()
		res = ptrace(PTRACE_GETREGS, self.pid, None, byref(regs))
		if res == 0:
			return regs
		else:
			self.logger.error("[!]failed to get register. %d: %s"
				%(res, os.strerror(res)))
			return res

	def get_reg(self, reg):
		self.check_pid()

		regs = self.get_regs()
		return regs.str_get(reg)

	def get_mem(self, addr, size):
		self.check_pid()
		caddr = c_ulonglong(addr)
		mem = ''
		#can this function check error?? what if WORD[addr] == -1?
		for i in range(int(size/4)+1):
			res = ptrace(PTRACE_PEEKTEXT, self.pid, caddr, None)
			res &= 0xffffffff
			mem += struct.pack('<L', res)
			addr += 4
			caddr = c_ulonglong(addr)

		return mem[:size]

	def set_regs(self, regs):
		self.check_pid()
		res = ptrace(PTRACE_SETREGS, self.pid, None, byref(regs))
		if res != 0:
			self.logger.error("[!]failed to set registers. %d: %s"
				%(res, os.strerror(res)))
		return res

	def set_reg(self, reg, val):
		self.check_pid()
		regs = self.get_regs()
		regs.str_set(reg, val)
		return self.set_regs(regs)

	def set_mem(self, addr, data):
		self.check_pid()
		count = len(data)
		res = 0
		for i in range(int(count/8)):
			caddr = c_ulonglong(addr)
			cdata = c_ulonglong(struct.unpack('<Q', data[:8])[0])
			res = ptrace(PTRACE_POKEDATA, self.pid, caddr, cdata)
			addr += 8
			data = data[8:]


		if count %8 != 0:
			mem = self.get_mem(addr, 8)
			data += mem[len(data):]
			caddr = c_ulonglong(addr)
			cdata = c_ulonglong(struct.unpack('<Q', data[:8])[0])
			res = ptrace(PTRACE_POKEDATA, self.pid, caddr, cdata)

		return res


	def break_handler(self):
		self.check_pid()
		rip = self.get_reg('rip') - 1
		self.set_reg('rip', rip)
		if rip not in self.breakpoints.keys():
			self.logger.info('not my bp maybe? %x'%rip)
			return
		self.logger.info('hit bp at %08x'%rip)

		action, opc_org = self.breakpoints[int(rip)]
		action(self)
		self.set_mem(rip, opc_org)
		self.set_reg('rip', rip)
		self.step()
		_, status = os.waitpid(self.pid, 0)
		self.set_mem(rip, '\xcc')
		self.cont()

	def set_break_sw(self, addr, action=break_action_default):
		self.check_pid()
		opc_org = self.get_mem(addr, 1)
		if self.set_mem(addr, '\xcc') != 0:
			self.logger.error('[!]failed to set sw breakpoint.')

		self.breakpoints[addr] = action, opc_org

	def unset_break_sw(self, addr):
		self.check_pid()
		_, opc_org = self.breakpoints[addr]
		if self.set_mem(addr, opc_org) != 0:
			self.logger.error('[!]bp unset failed')

		del self.breakpoints[addr]

	def syscall(self):
		self.check_pid()
		return ptrace(PTRACE_SYSCALL, self.pid, None, None);

	def syscall_num(self, arg1):
		if type(arg1 == int):
			sysnum = [arg1]
		elif type(arg1 == list):
			sysnum = arg1
		else:
			self.logger.error('arg type error')
			exit()

		self.check_pid()
		while True:
			self.syscall()
			_, status = os.waitpid(self.pid, 0)
			if os.WIFSTOPPED(status) or os.WSTOPSIG(status):
				scn = self.get_reg('orig_rax')
				if scn in sysnum:
					return scn;
				else:
					continue

			elif os.WIFEXITED(status) or os.WIFSIGNALED(status):
				return -1

	def get_str(self, addr):
		self.check_pid()
		ret = ''
		while True:
			tmp = self.get_mem(addr, MEM_SEARCH_SIZE_QUICK)
			eos = tmp.find('\x00')
			if eos < 0:
				ret += tmp
			else:
				ret += tmp[:eos]
				break
			addr += 4

		return ret

	def wait_until_break(self):
		self.check_pid()
		ret=''
		_, status = os.waitpid(self.pid, 0)






	







